{"version":3,"sources":["components/PrivateRoute.js","actions/constants.js","components/Header/index.js","actions/auth.actions.js","components/Layout/index.js","containers/HomePage/index.js","actions/users.actions.js","components/UI/Card/index.js","containers/LoginPage/index.js","serviceWorker.js","containers/RegisterPage/index.js","App.js","reducers/auth.reducer.js","reducers/user.reducer.js","reducers/index.js","store/index.js","index.js"],"names":["PrivateRoute","Component","component","rest","props","localStorage","getItem","JSON","parse","to","authConstant","userConstants","Header","auth","useSelector","state","dispatch","useDispatch","className","style","display","authenticated","margin","color","fontWeight","firstName","lastName","onClick","uid","a","type","firestore","collection","doc","update","isOnline","then","signOut","clear","catch","error","console","log","payload","Layout","children","User","user","src","alt","flex","justifyContent","HomePage","unsubscribe","useState","ChatStarted","setChatStarted","chatUser","setChatUser","message","setMessage","userUid","setUserUid","useEffect","db","onSnapshot","querySnapshot","users","forEach","data","push","f","initChat","where","uid_1","uid_2","orderBy","conversations","user_uid_1","user_uid_2","length","getRealtimeConversations","map","key","con","textAlign","background","value","onChange","e","target","placeholder","msgObj","add","isView","createdAt","Date","updateMessage","Card","LoginPage","email","setEmail","password","setPassword","onSubmit","preventDefault","signInWithEmailAndPassword","name","displayName","split","loggedInUser","setItem","stringify","alert","Boolean","window","location","hostname","match","RegisterPage","setFirstName","setLastName","createUserWithEmailAndPassword","currentUser","updateProfile","set","signup","App","Authenticated","path","exact","initState","authenticating","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5aacbc92.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\n/**\r\n * @author\r\n * @function PrivateRoute\r\n **/\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    return ( <\r\n        Route {...rest }\r\n        component = {\r\n            (props) => {\r\n                const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\r\n                if (user) {\r\n                    return <Component {...props }\r\n                    />\r\n                } else {\r\n                    return <Redirect to = { `/login` }\r\n                    />\r\n                }\r\n            }\r\n        }\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default PrivateRoute","export const authConstant = {\r\n    USER_LOGIN: 'USER_LOGIN',\r\n    USER_LOGOUT: 'USER_LOGOUT'\r\n}\r\n\r\nexport const userConstants = {\r\n    GET_REALTIME_USERS: 'GET_REALTIME_USERS',\r\n    GET_REALTIME_MESSAGES: 'GET_REALTIME_MESSAGES'\r\n}","import React from 'react'\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport './style.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../../actions';\r\n/**\r\n * @author\r\n * @function Header\r\n **/\r\n\r\nconst Header = (props) => {\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n    // const logout =()=>{\r\n    //     dispatch(logout());\r\n\r\n    // }\r\n\r\n    return ( <\r\n        header className = \"header\" >\r\n        <\r\n        div style = {\r\n            { display: 'flex' } } >\r\n        <\r\n        div className = \"logo\" > Web Messenger < /div> {\r\n            !auth.authenticated ?\r\n\r\n                <\r\n                ul className = \"leftMenu\" >\r\n                <\r\n                li > < NavLink to = { '/login' } > Login < /NavLink></li >\r\n                <\r\n                li > < NavLink to = { '/signup' } > Sign up < /NavLink></li >\r\n                <\r\n                /ul> : null\r\n        } <\r\n        /div> <\r\n        div style = {\r\n            { margin: '20px 0', color: '#fff', fontWeight: 'bold' } } > { auth.authenticated ? `Hi ${auth.firstName} ${auth.lastName} ` : '' } <\r\n        /div> <\r\n        ul className = \"menu\" > {\r\n            auth.authenticated ?\r\n            <\r\n            li >\r\n            <\r\n            Link to = { '#' }\r\n            onClick = {\r\n                () => {\r\n                    dispatch(logout(auth.uid))\r\n                }\r\n            } > Logout < /Link> <\r\n            /li> :null\r\n        } <\r\n        /ul> <\r\n        /header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","import { auth, firestore } from 'firebase';\r\nimport { authConstant } from './constants';\r\n\r\nexport const signup = (user) => {\r\n    return async(dispatch) => {\r\n\r\n        const db = firestore();\r\n\r\n        dispatch({ type: `${authConstant.USER_LOGIN}_REQUEST` });\r\n\r\n        auth().createUserWithEmailAndPassword(user.email, user.password)\r\n            .then(data => {\r\n                console.log(data);\r\n                const currentUser = auth().currentUser;\r\n                const name = `${user.firstName} ${user.lastName}`;\r\n                currentUser.updateProfile({\r\n                        displayName: name\r\n                    })\r\n                    .then(() => {\r\n                        // if you are here means it is updated successfully\r\n                        db.collection('users')\r\n                            .doc(data.user.uid)\r\n                            .set({\r\n                                firstName: user.firstName,\r\n                                lastName: user.lastName,\r\n                                uid: data.user.uid,\r\n                                createdAt: new Date(),\r\n                                isOnline: true\r\n                            })\r\n                            .then(() => {\r\n\r\n                                //successfull\r\n                                const loggedInUser = {\r\n                                    firstName: user.firstName,\r\n                                    lastName: user.lastName,\r\n                                    uid: data.user.uid,\r\n                                    email: user.email\r\n\r\n                                }\r\n                                localStorage.setItem('user', JSON.stringify(loggedInUser));\r\n                                console.log('User logged in Successfully...!');\r\n                                dispatch({\r\n                                    type: `${authConstant.USER_LOGIN}_SUCCESS`,\r\n                                    payload: { user: loggedInUser }\r\n                                })\r\n                            })\r\n                            .catch((error) => {\r\n                                dispatch({\r\n                                    type: `${authConstant.USER_LOGIN}_FAILURE`,\r\n                                    payload: { error }\r\n                                });\r\n                                console.log(error);\r\n                            })\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n}\r\n\r\nexport const signin = (user) => {\r\n    return async dispatch => {\r\n        dispatch({ type: `${authConstant.USER_LOGIN}_REQUEST` });\r\n        auth().\r\n        signInWithEmailAndPassword(user.email, user.password)\r\n            .then((data) => {\r\n                console.log(data);\r\n\r\n                const db = firestore();\r\n                db.collection('users')\r\n                    .doc(data.user.uid)\r\n                    .update({\r\n                        isOnline: true\r\n                    })\r\n                    .then(() => {\r\n                        const name = data.user.displayName.split(\" \");\r\n                        const firstName = name[0];\r\n                        const lastName = name[1];\r\n\r\n                        const loggedInUser = {\r\n                            firstName,\r\n                            lastName,\r\n                            uid: data.user.uid,\r\n                            email: data.user.email\r\n\r\n                        }\r\n                        localStorage.setItem('user', JSON.stringify(loggedInUser));\r\n                        dispatch({\r\n                            type: `${authConstant.USER_LOGIN}_SUCCESS`,\r\n                            payload: { user: loggedInUser }\r\n                        });\r\n\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error)\r\n                    })\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                dispatch({\r\n                    type: `${authConstant.USER_LOGIN}_FAILURE`,\r\n                    payload: { error }\r\n                });\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const isLoggedInUser = () => {\r\n    return async dispatch => {\r\n        const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\r\n\r\n        if (user) {\r\n            dispatch({\r\n                type: `${authConstant.USER_LOGIN}_SUCCESS`,\r\n                payload: { user }\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: `${authConstant.USER_LOGIN}_FAILURE`,\r\n                payload: { error: 'Login Again Please' }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (uid) => {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: `${authConstant.USER_LOGOUT}_REQUEST`\r\n\r\n        });\r\n        const db = firestore();\r\n        db.collection('users')\r\n            .doc(uid)\r\n            .update({\r\n                isOnline: false\r\n            })\r\n            .then(() => {\r\n                auth().\r\n                signOut()\r\n                    .then(() => {\r\n                        localStorage.clear();\r\n                        dispatch({\r\n                            type: `${authConstant.USER_LOGOUT}_SUCCESS`\r\n                        });\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        dispatch({\r\n                            type: `${authConstant.USER_LOGOUT}_FAILURE`,\r\n                            payload: { error }\r\n                        });\r\n                    })\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n\r\n\r\n    }\r\n}","import React from 'react'\r\nimport Header from '../Header';\r\n/**\r\n * @author\r\n * @function Layout\r\n **/\r\n\r\nconst Layout = (props) => {\r\n    return ( <\r\n        div >\r\n        <\r\n        Header / > { props.children } <\r\n        /div>\r\n    )\r\n\r\n}\r\n\r\nexport default Layout","import React, { useEffect, useState } from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport './style.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getRealtimeConversations, getRealtimeUsers, updateMessage } from '../../actions';\r\n\r\n\r\n\r\nconst User = (props) => {\r\n\r\n    const { user, onClick } = props;\r\n    return ( <\r\n        div onClick = {\r\n            () => onClick(user) }\r\n        className = \"displayName\" >\r\n        <\r\n        div className = \"displayPic\" >\r\n        <\r\n        img src = \"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\"\r\n        alt = \"\" / >\r\n        <\r\n        /div> <\r\n        div style = {\r\n            { display: \"flex\", flex: 1, justifyContent: \"space-between\", margin: '0 10px' } } >\r\n        <\r\n        span style = {\r\n            { fontWeight: 500 } } > { user.firstName } { user.lastName } < /span> <\r\n        span className = { user.isOnline ? `onlineStatus` : `onlineStatus off` } > < /span> <\r\n        /div> <\r\n        /div>\r\n    );\r\n}\r\n\r\nconst HomePage = (props) => {\r\n\r\n        const dispatch = useDispatch();\r\n        const auth = useSelector(state => state.auth);\r\n        const user = useSelector(state => state.user);\r\n        const [ChatStarted, setChatStarted] = useState(false);\r\n        const [chatUser, setChatUser] = useState('');\r\n        const [message, setMessage] = useState('');\r\n        const [userUid, setUserUid] = useState(null);\r\n        let unsubscribe;\r\n\r\n\r\n        useEffect(() => {\r\n            unsubscribe = dispatch(getRealtimeUsers(auth.uid))\r\n                .then(unsubscribe => {\r\n\r\n                    return unsubscribe;\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                })\r\n\r\n\r\n        }, []);\r\n        //console.log(user)\r\n\r\n        //componentwillunmount\r\n        useEffect(() => {\r\n            return () => {\r\n                //cleanup\r\n                unsubscribe.then(f => f()).catch(error => {\r\n                    console.log(error);\r\n                })\r\n            }\r\n\r\n        }, []);\r\n\r\n        const initChat = (user) => {\r\n            setChatStarted(true)\r\n            setChatUser(`${user.firstName} ${user.lastName}`)\r\n            setUserUid(user.uid);\r\n            console.log(user);\r\n            dispatch(getRealtimeConversations({\r\n                uid_1: auth.uid,\r\n                uid_2: user.uid\r\n            }));\r\n\r\n        }\r\n\r\n\r\n\r\n        const submitMessage = (e) => {\r\n\r\n            const msgObj = {\r\n                user_uid_1: auth.uid,\r\n                user_uid_2: userUid,\r\n                message\r\n            }\r\n\r\n            if (message !== \"\") {\r\n                dispatch(updateMessage(msgObj))\r\n                    .then(() => {\r\n                        setMessage('')\r\n                    });\r\n            }\r\n            // console.log(msgObj);\r\n\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <\r\n            Layout >\r\n            <\r\n            section className = \"container\" >\r\n            <\r\n            div className = \"listOfUsers\" > {\r\n                user.users.length > 0 ?\r\n                user.users.map(user => {\r\n                    return ( <\r\n                        User onClick = { initChat }\r\n                        key = { user.uid }\r\n                        user = { user }\r\n                        />\r\n\r\n                    );\r\n                }) : null\r\n            }\r\n\r\n\r\n\r\n            <\r\n            /div> <\r\n            div className = \"chatArea\" >\r\n            <\r\n            div className = \"chatHeader\" > {\r\n                ChatStarted ? chatUser : ''\r\n            }\r\n\r\n            <\r\n            /div> <\r\n            div className = \"messageSections\" > {\r\n                ChatStarted ?\r\n                user.conversations.map(con =>\r\n                    <\r\n                    div style = {\r\n                        { textAlign: con.user_uid_1 == auth.uid ? 'right' : 'left' } } >\r\n                    <\r\n                    p style = {\r\n                        { background: con.user_uid_1 == auth.uid ? 'skyblue' : 'gray' } }\r\n                    className = \"messageStyle\" > { con.message } < /p> <\r\n                    /div> ): null\r\n                } <\r\n                /div> {\r\n                    ChatStarted ?\r\n                        <\r\n                        div className = \"chatControls\" >\r\n                        <\r\n                        textarea\r\n                    value = { message }\r\n                    onChange = {\r\n                        (e) => setMessage(e.target.value) }\r\n                    placeholder = \"Write your message here\" /\r\n                        >\r\n                        <\r\n                        button onClick = { submitMessage } > Send < /button> <\r\n                        /div> : null\r\n                }\r\n\r\n                <\r\n                /div> <\r\n                /section> <\r\n                /Layout>\r\n            );\r\n        }\r\n\r\n        export default HomePage;","import { userConstants } from \"./constants\"\r\nimport { firestore } from 'firebase';\r\n\r\nexport const getRealtimeUsers = (uid) => {\r\n\r\n    return async(dispatch) => {\r\n        dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\r\n        const db = firestore();\r\n        const unsubscribe = db.collection(\"users\")\r\n            //.where(\"uid\", \"!=\", uid)\r\n            .onSnapshot((querySnapshot) => {\r\n                const users = [];\r\n                querySnapshot.forEach(function(doc) {\r\n                    if (doc.data().uid != uid) {\r\n                        users.push(doc.data());\r\n                    }\r\n\r\n                });\r\n                // console.log(users);\r\n                dispatch({\r\n                    type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\r\n                    payload: { users }\r\n                });\r\n            });\r\n        return unsubscribe;\r\n    }\r\n}\r\n\r\nexport const updateMessage = (msgObj) => {\r\n\r\n    return async dispatch => {\r\n        const db = firestore();\r\n        db.collection('conversations')\r\n            .add({\r\n                ...msgObj,\r\n                isView: false,\r\n                createdAt: new Date()\r\n\r\n            })\r\n            .then((data) => {\r\n                console.log(data)\r\n                    //success\r\n                    // dispatch({\r\n                    //     type: userConstants.GET_REALTIME_MESSAGES,\r\n\r\n\r\n                // })\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport const getRealtimeConversations = (user) => {\r\n    return async dispatch => {\r\n        const db = firestore();\r\n        db.collection('conversations')\r\n            .where('user_uid_1', 'in', [user.uid_1, user.uid_2])\r\n            .orderBy('createdAt', 'asc')\r\n            .onSnapshot((querySnapshot) => {\r\n                const conversations = [];\r\n                querySnapshot.forEach(doc => {\r\n                    if (\r\n                        (doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2) ||\r\n                        (doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1)\r\n                    ) {\r\n                        conversations.push(doc.data());\r\n                    }\r\n\r\n                    if (conversations.length > 0) {\r\n                        dispatch({\r\n                            type: userConstants.GET_REALTIME_MESSAGES,\r\n                            payload: { conversations }\r\n                        })\r\n                    } else {\r\n                        dispatch({\r\n                            type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\r\n                            payload: { conversations }\r\n                        })\r\n                    }\r\n\r\n\r\n\r\n                })\r\n                console.log(conversations);\r\n            })\r\n    }\r\n}","import React from 'react'\r\nimport './style.css';\r\n/**\r\n * @author\r\n * @function Card\r\n **/\r\n\r\nconst Card = (props) => {\r\n    return ( <\r\n        div className = \"card\" > { props.children } < /div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport Layout from '../../components/Layout';\r\nimport Card from '../../components/UI/Card';\r\nimport './style.css';\r\nimport { signin, isLoggedInUser } from '../../actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n/**\r\n * @author\r\n * @function LoginPage\r\n **/\r\n\r\nconst LoginPage = (props) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth);\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     if(!auth.Authenticated){\r\n    //         dispatch(isLoggedInUser());\r\n    //     }\r\n    // },[]);\r\n\r\n    const userLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (email == \"\") {\r\n            alert(\"Email is Required!\");\r\n            return;\r\n        }\r\n        if (password == \"\") {\r\n            alert(\"Email is Required!\");\r\n            return;\r\n        }\r\n\r\n        dispatch(signin({ email, password }));\r\n\r\n\r\n    }\r\n    if (auth.authenticated) {\r\n        return <Redirect to = \"/\" / >\r\n    }\r\n\r\n    return ( <\r\n        Layout >\r\n        <\r\n        div className = \"loginContainer\" >\r\n        <\r\n        Card >\r\n        <\r\n        form onSubmit = { userLogin } >\r\n        <\r\n        h3 className = \"headingLog\" > Log In < /h3> <\r\n        input name = \"email\"\r\n        type = \"text\"\r\n        value = { email }\r\n        onChange = {\r\n            (e) => setEmail(e.target.value) }\r\n        placeholder = \"Email\" / >\r\n        <\r\n        input name = \"password\"\r\n        type = \"password\"\r\n        value = { password }\r\n        onChange = {\r\n            (e) => setPassword(e.target.value) }\r\n        placeholder = \"Password\" / >\r\n        <\r\n        div >\r\n        <\r\n        button > LogIn < /button> <\r\n        /div> <\r\n        /form> <\r\n        /Card> <\r\n        /div> <\r\n        /Layout>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default LoginPage","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport Layout from '../../components/Layout'\r\nimport Card from '../../components/UI/Card'\r\nimport './style.css';\r\nimport { signup } from '../../actions';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { register } from '../../serviceWorker';\r\n/**\r\n * @author\r\n * @function RegisterPage\r\n **/\r\n\r\nconst RegisterPage = (props) => {\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth);\r\n\r\n    const registerUser = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        const user = { firstName, lastName, email, password }\r\n        dispatch(signup(user))\r\n    }\r\n\r\n    if (auth.authenticated) {\r\n        return <Redirect to = \"/\" / >\r\n    }\r\n\r\n    return ( <\r\n        Layout >\r\n        <\r\n        div className = \"registerContainer\" >\r\n        <\r\n        Card >\r\n        <\r\n        form onSubmit = { registerUser } >\r\n        <\r\n        h3 > Sign Up < /h3> <\r\n        input name = \"firstName\"\r\n        type = \"text\"\r\n        value = { firstName }\r\n        onChange = {\r\n            (e) => setFirstName(e.target.value) }\r\n        placeholder = \"First Name\" / >\r\n        <\r\n        input name = \"lastName\"\r\n        type = \"text\"\r\n        value = { lastName }\r\n        onChange = {\r\n            (e) => setLastName(e.target.value) }\r\n        placeholder = \"Last Name\" / >\r\n        <\r\n        input name = \"email\"\r\n        type = \"text\"\r\n        value = { email }\r\n        onChange = {\r\n            (e) => setEmail(e.target.value) }\r\n        placeholder = \"Email\" / >\r\n        <\r\n        input name = \"password\"\r\n        type = \"password\"\r\n        value = { password }\r\n        onChange = {\r\n            (e) => setPassword(e.target.value) }\r\n        placeholder = \"Password\" / >\r\n        <\r\n        div > < button > SignUp < /button></div >\r\n        <\r\n        /form> <\r\n        /Card> <\r\n        /div> <\r\n        /Layout>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default RegisterPage","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport PrivateRoute from './components/PrivateRoute';\nimport HomePage from './containers/HomePage';\nimport LoginPage from './containers/LoginPage';\nimport RegisterPage from './containers/RegisterPage';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isLoggedInUser } from './actions';\n\nfunction App() {\n\n    const auth = useSelector(state => state.auth);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!auth.Authenticated) {\n            dispatch(isLoggedInUser());\n        }\n    }, []);\n    return ( <\n        div className = \"App\" >\n        <\n        Router > { /*only logged in user can access this home route*/ }\n\n        <\n        PrivateRoute path = \"/\"\n        exact component = { HomePage }\n        /> <\n        Route path = \"/login\"\n        component = { LoginPage }\n        /> <\n        Route path = \"/signup\"\n        component = { RegisterPage }\n        /> <\n        /Router> <\n        /div>\n    );\n}\n\nexport default App;","import { authConstant } from \"../actions/constants\"\r\n\r\nconst initState = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    authenticating: false,\r\n    authenticated: false,\r\n    error: null\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n\r\n    console.log(action);\r\n\r\n    switch (action.type) {\r\n        case `${authConstant.USER_LOGIN}_REQUEST`:\r\n            state = {\r\n                ...state,\r\n                authenticating: true\r\n            }\r\n            break;\r\n        case `${authConstant.USER_LOGIN}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                ...action.payload.user,\r\n                authenticated: true,\r\n                authenticating: false\r\n            }\r\n            break;\r\n        case `${authConstant.USER_LOGIN}_FAILURE`:\r\n            state = {\r\n                ...state,\r\n                authenticated: false,\r\n                authenticating: false,\r\n                error: action.payload.error\r\n            }\r\n            break;\r\n\r\n        case `${authConstant.USER_LOGOUT}_REQUEST`:\r\n            break;\r\n        case `${authConstant.USER_LOGOUT}_SUCCESS`:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break;\r\n        case `${authConstant.USER_LOGOUT}_FAILURE`:\r\n            state = {\r\n                ...state,\r\n                error: action.payload.error\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n\r\n}","import { userConstants } from \"../actions/constants\"\r\n\r\nconst initState = {\r\n    users: [],\r\n    conversations: []\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n        case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\r\n            break;\r\n        case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                users: action.payload.users\r\n            }\r\n            break;\r\n        case userConstants.GET_REALTIME_MESSAGES:\r\n            state = {\r\n                ...state,\r\n                conversations: action.payload.conversations\r\n            }\r\n            break;\r\n\r\n\r\n    }\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './auth.reducer';\r\nimport userReducer from './user.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    user: userReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCp3E7yJdIKuFjFsdp806AJsuWeZzFd0YE\",\n    authDomain: \"web-messenger-fdf03.firebaseapp.com\",\n    databaseURL: \"https://web-messenger-fdf03.firebaseio.com\",\n    projectId: \"web-messenger-fdf03\",\n    storageBucket: \"web-messenger-fdf03.appspot.com\",\n    messagingSenderId: \"716293596046\",\n    appId: \"1:716293596046:web:b2d3e735d84c718c98fadf\",\n    measurementId: \"G-3PX83PWFRT\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nwindow.store = store;\n\nReactDOM.render( <\n    Provider store = { store } >\n    <\n    React.StrictMode >\n    <\n    App / >\n    <\n    /React.StrictMode> <\n    /Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}